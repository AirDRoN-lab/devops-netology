default:
  tags:
    - home

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# workflow:
#   rules:
#     - if: $CI_COMMIT_TITLE =~ /draft$/
#       when: never

stages:          
  - infrabuild
  - kuberinstall
  - infradestroy

yc-install:  # Установка yc и подотовка артефактов   
  stage: infrabuild
  image: dgolodnikov/u2204_glimage_v1:1.2.1 # Образ с базовыми утилитами (curl, git, net-tools, etc)
  when: manual
  script:
    - echo "MAIN. Installing YaCloud CLI App..."
    - curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i yc -n
    - export PATH=$PATH:yc/bin 
    - yc --version
    - echo -e "YC_PATH=yc/bin" > variables01.env
  artifacts:
    when: on_success
    paths:
      - yc/bin
    reports:
      dotenv: variables01.env

trf-preapply: # Создание YaCloud SA и S3. Инициализация terraform
  stage: infrabuild
  needs: [yc-install]
  image: 
    name: hashicorp/terraform:1.4 # Базовый образ с terraform 1.4
    entrypoint: [""]
  before_script:
    - echo "PREPARE. YaCloud CLI App configuring"
    - export PATH=$PATH:$YC_PATH
    - yc --version
    - terraform --version
    - apk update
    - apk add jq 
  script:
    - echo "MAIN. Creating S3 and SA in YaCloud"
    - source ./start.sh init # Инициализация обалка YaCloud
    - yc config list
    - source ./start.sh sas3-create # Создание SA и S3 в YaCloud. Идентификаторы в переменных окружения
    - printenv
    - echo -e "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" > variables02.env 
    - echo -e "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> variables02.env 
    - echo -e "TF_VAR_YC_SA_PUBLICKEYID=$YC_SA_PUBLICKEYID" >> variables02.env
    - echo -e "TF_VAR_YC_SA_PUBLICKEY=$YC_SA_PUBLICKEY" >> variables02.env
    - echo -e "TF_VAR_YC_SA_ACCESSKEY=$YC_SA_ACCESSKEY" >> variables02.env
    - echo -e "TF_VAR_YC_TOKEN=$YC_TOKEN" >> variables02.env
    - echo -e "TF_VAR_YC_CLOUD_ID=$YC_CLOUD_ID" >> variables02.env
    - echo -e "TF_VAR_YC_FOLDER_ID=$YC_FOLDER_ID" >> variables02.env
    - echo -e "YC_PATH=$YC_PATH" >> variables02.env
    - cat variables02.env
  artifacts:
    when: on_success
    paths:
      - yc/bin
    reports:
      dotenv: variables02.env

trf-apply: # Создание инфраструктуры в YaCloud для развертывания Kuber кластера 
  stage: infrabuild
  needs: [trf-preapply]
  image: 
    name: hashicorp/terraform:1.4
    entrypoint: [""]
  before_script:
    - echo "PREPARE. YaCloud CLI App configuring"
    - export PATH=$PATH:$YC_PATH
    - yc --version
    - terraform --version
    - apk update
    - apk add jq 
  script:
    - echo "MAIN. Terraform init and apply starts. Deploying infrastructure"
    - source ./start.sh init # Инициализация обалка YaCloud
    - yc config list
    - source ./start.sh infra-create # Создание инфраструктуры YaCloud
    - printenv
  # - source ./start.sh export
    - echo -e "vm_ip1=$vm_ip1" > variables03.env
    - echo -e "vm_ip2=$vm_ip2" >> variables03.env
    - echo -e "vm_ip3=$vm_ip3" >> variables03.env
    - echo -e "vm_ip1int=$vm_ip1int" >> variables03.env
    - echo -e "vm_ip2int=$vm_ip2int" >> variables03.env
    - echo -e "vm_ip3int=$vm_ip3int" >> variables03.env 
    - cat variables03.env 
  artifacts:
    when: on_success
    paths:
      - yc/bin
    reports:
      dotenv: variables03.env
  
kuber-install:  # Развертывание kuber кластера с помощью kubespray
  stage: kuberinstall
  image: dgolodnikov/u2204_glimage_v1:1.2.2 # Образ с базовыми утилитами (curl, git, net-tools, etc)
  when: manual
  variables: 
    ANSIBLE_HOST_KEY_CHECKING: "False"
  before_script:
    - echo "PREPARE. Chmod SSH private key"
    - printenv
    - chmod 400 ${SSH_PRIVATE_KEY}
  script:
    - echo "MAIN. Installing Kubercluster"
    - ssh -i ${SSH_PRIVATE_KEY} -o strictHostKeyChecking=no dgolodnikov@${vm_ip1} "printenv"
    - ssh -i ${SSH_PRIVATE_KEY} -o strictHostKeyChecking=no dgolodnikov@${vm_ip2} "printenv"
    - ssh -i ${SSH_PRIVATE_KEY} -o strictHostKeyChecking=no dgolodnikov@${vm_ip3} "printenv"
    - pip3 install -r 20-kube/requirements.txt 
    - ansible-playbook -b --private-key ${SSH_PRIVATE_KEY} --user dgolodnikov --inventory 20-kube/inventory/kuber/hosts.yaml 20-kube/cluster.yml -e vmip1=$vm_ip1 -e vmip2=$vm_ip2 -e vmip3=$vm_ip3 -e vmip1ext=$vm_ip1 -e vmip1int=$vm_ip1int -e vmip2int=$vm_ip2int -e vmip3int=$vm_ip3int
    - echo -e "---\\nGrafana Access http://"$vm_ip1":30123\\n---"

monitor-install: # Развертывание системы мониторинга kuber кластера
  stage: kuberinstall
  image: dgolodnikov/u2204_glimage_v2:1.1.0 # Образ с ansible, kubectl, helm и прочими базовыми утилитами
  needs: [kuber-install]
  variables: 
    ANSIBLE_HOST_KEY_CHECKING: "False"
  before_script: # Обеспечение доступа к куберкластеру (формирование kubeconfig), клон репозитория kube-prometheus
    - echo "PREPARE. Accessing to Kubercluster"
    - printenv
    - chmod 400 ${SSH_PRIVATE_KEY}
    - ansible-playbook --private-key ${SSH_PRIVATE_KEY} --user dgolodnikov --inventory 22-kubeaccess/inventory/hosts.yaml 22-kubeaccess/site.yaml -e vmip1ext=$vm_ip1
    - kubectl get nodes
    - git clone https://github.com/prometheus-operator/kube-prometheus.git
  script: # Развертывание системы мониторинга в namespace monitoring
    - echo "MAIN. Installing Kube-prometheus app"
    - kubectl apply --server-side -f  kube-prometheus/manifests/setup
    - sleep 15 # Ожидание готовности контейнеров
    - kubectl apply -f kube-prometheus/manifests/
    - kubectl apply -n monitoring -f 25-monitoring/grafana-access.yaml # Обеспечение доступа к Grafana
    - kubectl delete -n monitoring networkpolicy grafana # Обеспечение доступа к Grafana, удаление сетевой политики
    - kubectl get -n monitoring svc
    - kubectl get -n monitoring pods
    - kubectl get -n monitoring networkpolicy

monitor-delete: # Удаление системы мониторинга, запуск в ручном режиме. Сервисный Job
  stage: kuberinstall
  image: dgolodnikov/u2204_glimage_v2:1.0.0 # Образ с ansible, kubectl и прочими базовыми утилитами
  when: manual
  variables: 
    ANSIBLE_HOST_KEY_CHECKING: "False"
  before_script: # Обеспечение доступа к куберкластеру (формирование kubeconfig)
    - echo "PREPARE. Accessing to Kubercluster"
    - printenv
    - chmod 400 ${SSH_PRIVATE_KEY}
    - ansible-playbook --private-key ${SSH_PRIVATE_KEY} --user dgolodnikov --inventory 22-kubeaccess/inventory/hosts.yaml 22-kubeaccess/site.yaml -e vmip1ext=$vm_ip1
    - kubectl get nodes
    - git clone https://github.com/prometheus-operator/kube-prometheus.git
  script:
    - echo "MAIN. Deleting Kube-prometheus app"
    - kubectl delete  -f kube-prometheus/manifests/
    - sleep 15 # Ожидание готовности контейнеров (вернее их отсуствия)
    - kubectl delete -f kube-prometheus/manifests/setup
    - kubectl delete -n monitoring -f 25-monitoring/grafana-access.yaml

infra-destroy: # Удаление всей инфраструктуры, запуск в ручном режиме. Сервисный Job
  stage: infradestroy
  image: 
    name: hashicorp/terraform:1.4
    entrypoint: [""]
  when: manual
  before_script: 
    - echo "PREPARE. YaCloud CLI App configuring"
    - export PATH=$PATH:$YC_PATH
    - printenv
    - yc --version
    - terraform --version
    - apk update
    - apk add jq
  script:
    - echo "MAIN. Destroing Yandex infrastructure"
    - echo "Terraform destroy..."
    - source ./start.sh init
    - yc config list
    - source ./start.sh all-destroy
